#include<ros/ros.h>
#include<geometry_msgs/Twist.h> //data type for velocities
#include<math.h>
int main(int argc,char **argv)
{
	ros::init(argc,argv,"command_publisher");//name of this node
	ros::NodeHandle n;
	ros::Publisher pub = n.advertise<geometry_msgs::Twist>("cmd_vel",1);
	//"cmd_vel" is the topic name to publish velocity commands
	//"1" is the buffer size (could use buffer>1 in case network bogs down)

	//send robot forward for 3 seconds, reiterated at 10Hz.  Need a ROS "rate" object to enforce a rate
	geometry_msgs::Twist vel_object;
	ros::Duration run_duration(22.0); // specify desired duration of this command segment to be 3 seconds
	ros::Duration elapsed_time; // define a variable to hold elapsed time
	ros::Rate naptime(10); //will perform sleeps to enforce loop rate of "10" Hz
	while (!ros::Time::isValid()) {} // simulation time sometimes initializes slowly. Wait until ros::Time::now() will be valid
	ros::Time birthday= ros::Time::now(); // get the current time, which defines our start time, called "birthday"
	ROS_INFO("birthday started as %f", birthday.toSec());
	while (ros::ok()) // do work here
	{
		elapsed_time= ros::Time::now()-birthday;
		ROS_INFO("birthday is %f", birthday.toSec());
		ROS_INFO("elapsed time is %f", elapsed_time.toSec());
		if(elapsed_time.toSec() < 3) {
      vel_object.linear.x = 1.0; // command a forward velocity of 1m/sec
		  vel_object.angular.z = 0.0; //command a spin rate of 0.0 rad/sec
    } else if(elapsed_time.toSec() > 3 and elapsed_time.toSec() <= 4) {
      vel_object.linear.x = 0.0;
      vel_object.angular.z = asin(-1);
    } else if(elapsed_time.toSec() > 17 and elapsed_time.toSec() <= 18) {
      vel_object.linear.x = 0.0;
      vel_object.angular.z = asin(-1);
    } else {
      vel_object.linear.x = 1.0;
      vel_object.angular.z =0.0;
    }
		if ( elapsed_time < run_duration)
		{
			// send out new command appropriate for this instant;
			// boring--always send out the same speed/spin values in this example
			pub.publish(vel_object);  // this action causes the commands in vel_object to be published 
		}
		else
		{
			// done with 3 seconds of commands; now send out zeros indefinitely to halt the robot
			vel_object.linear.x = 0.0;
			vel_object.angular.z = 0.0;
			pub.publish(vel_object);
		}
		naptime.sleep(); // this will cause the loop to sleep for balance of time of desired (100ms) period
		//thus enforcing that we achieve the desired update rate (10Hz)
	}
	return 0; // this code will only get here if this node was told to shut down, which is
	// reflected in ros::ok() is false 
}
