"""autogenerated by genmsg_py from CrawlerDesiredState.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg
import std_msgs.msg

class CrawlerDesiredState(roslib.message.Message):
  _md5sum = "8a022665b62e846aae599403b4b5aab1"
  _type = "eecs376_msgs/CrawlerDesiredState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """#Standard ROS header for timestamp and frame_id
Header header

#Segment type
int8 seg_type

#Segment number
uint32 seg_number

#6DOF pose
geometry_msgs/Pose des_pose

#Desired speed
float64 des_speed

#Desired curvature
float64 des_rho

#Desired distance along the segment
float64 des_lseg

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['header','seg_type','seg_number','des_pose','des_speed','des_rho','des_lseg']
  _slot_types = ['Header','int8','uint32','geometry_msgs/Pose','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,seg_type,seg_number,des_pose,des_speed,des_rho,des_lseg
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CrawlerDesiredState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.seg_type is None:
        self.seg_type = 0
      if self.seg_number is None:
        self.seg_number = 0
      if self.des_pose is None:
        self.des_pose = geometry_msgs.msg.Pose()
      if self.des_speed is None:
        self.des_speed = 0.
      if self.des_rho is None:
        self.des_rho = 0.
      if self.des_lseg is None:
        self.des_lseg = 0.
    else:
      self.header = std_msgs.msg._Header.Header()
      self.seg_type = 0
      self.seg_number = 0
      self.des_pose = geometry_msgs.msg.Pose()
      self.des_speed = 0.
      self.des_rho = 0.
      self.des_lseg = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_bI10d.pack(_x.seg_type, _x.seg_number, _x.des_pose.position.x, _x.des_pose.position.y, _x.des_pose.position.z, _x.des_pose.orientation.x, _x.des_pose.orientation.y, _x.des_pose.orientation.z, _x.des_pose.orientation.w, _x.des_speed, _x.des_rho, _x.des_lseg))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.des_pose is None:
        self.des_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 85
      (_x.seg_type, _x.seg_number, _x.des_pose.position.x, _x.des_pose.position.y, _x.des_pose.position.z, _x.des_pose.orientation.x, _x.des_pose.orientation.y, _x.des_pose.orientation.z, _x.des_pose.orientation.w, _x.des_speed, _x.des_rho, _x.des_lseg,) = _struct_bI10d.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_bI10d.pack(_x.seg_type, _x.seg_number, _x.des_pose.position.x, _x.des_pose.position.y, _x.des_pose.position.z, _x.des_pose.orientation.x, _x.des_pose.orientation.y, _x.des_pose.orientation.z, _x.des_pose.orientation.w, _x.des_speed, _x.des_rho, _x.des_lseg))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.des_pose is None:
        self.des_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 85
      (_x.seg_type, _x.seg_number, _x.des_pose.position.x, _x.des_pose.position.y, _x.des_pose.position.z, _x.des_pose.orientation.x, _x.des_pose.orientation.y, _x.des_pose.orientation.z, _x.des_pose.orientation.w, _x.des_speed, _x.des_rho, _x.des_lseg,) = _struct_bI10d.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3I = struct.Struct("<3I")
_struct_bI10d = struct.Struct("<bI10d")
